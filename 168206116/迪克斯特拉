# 迪克斯特拉算法：计算加权图中的最短路径
# graph: 起点begin，a,b,终点f之间的距离
graph = {}
graph["begin"] = {}
graph["begin"]["a"] = 6
graph["begin"]["a"] = 2
graph["a"] = {}
graph["a"]["f"] = 1
graph["b"] = {}
graph["b"]["a"] = 3
graph["b"]["f"] = 5
graph["f"] = {}
infinity = float("inf")
costs = {}
costs["a"] = 6
costs["b"] = 2
costs["f"] = infinity

parents = {}
parents["a"] = "begin"
parents["b"] = "begin"
parents["f"] = None
processed = []

def find_lowest_cost_node(costs):
lowest_cost = float("inf")
lowest_cost_node = None
for node in costs:
cost = costs[node]
if cost < lowest_cost and node not in processed:
lowest_cost = cost
lowest_cost_node = node
return lowest_cost_node

node = find_lowest_cost_node(costs) 
while node is not None:
cost = costs[node] 
neighbors = graph[node]
for n in neighbors.keys():
new_cost = cost + neighbors[n]
if costs[n] > new_cost:
costs[n] = new_cost
parents[n] = node
processed.append(node)
node = find_lowest_cost_node(costs)

print(processed)
